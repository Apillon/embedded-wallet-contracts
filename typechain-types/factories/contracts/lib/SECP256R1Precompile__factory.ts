/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SECP256R1Precompile,
  SECP256R1PrecompileInterface,
} from "../../../contracts/lib/SECP256R1Precompile";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "isOnCurve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001a5761014a9081610020823930815050f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c630b0dbcfa1461002857600080fd5b604036600319011261004b57602090610045602435600435610050565b15158152f35b600080fd5b801580156100fc575b80156100f4575b80156100dc575b6100d557600160601b63ffffffff60c01b03199081907f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b90829081807fffffffff00000001000000000000000000000000fffffffffffffffffffffffc830991818180090908089180091490565b5050600090565b50600160601b63ffffffff60c01b0319821015610067565b508115610060565b50600160601b63ffffffff60c01b031981101561005956fea26469706673582212203a9bc58d20e6b015d32ef9719a0296ca2916e9304a968966efd2751fd0b8c86164736f6c63430008150033";

type SECP256R1PrecompileConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SECP256R1PrecompileConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SECP256R1Precompile__factory extends ContractFactory {
  constructor(...args: SECP256R1PrecompileConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SECP256R1Precompile & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SECP256R1Precompile__factory {
    return super.connect(runner) as SECP256R1Precompile__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SECP256R1PrecompileInterface {
    return new Interface(_abi) as SECP256R1PrecompileInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SECP256R1Precompile {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SECP256R1Precompile;
  }
}
