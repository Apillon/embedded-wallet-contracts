/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestJWT,
  TestJWTInterface,
} from "../../../contracts/test/TestJWT";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "secret",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "payload",
        type: "string",
      },
    ],
    name: "testHS256",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576102b5908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c63c486f2261461002a57600080fd5b346101a35760031990808236011261019f5767ffffffffffffffff91836004358481116101a357366023820112156101a3576100709036906024816004013591016101fb565b6024359085821161019f573660238301121561019f576100d16100a06100c29336906024816004013591016101fb565b948651958694859463bc6e4c4560e01b8652896004870152604486019061025a565b9184830301602485015261025a565b038173__$8f9caa4a00391e7768e6a3285c20104711$__5af4928315610195578493610111575b82516020808252819061010d9082018761025a565b0390f35b909192503d8085843e61012481846101a7565b820191602081840312610191578051918211610191570181601f8201121561018d57805193610152856101df565b9261015f855194856101a7565b8584526020868401011161018a575061010d936101829160208085019101610237565b9038806100f8565b80fd5b8380fd5b8480fd5b82513d86823e3d90fd5b8280fd5b5080fd5b90601f8019910116810190811067ffffffffffffffff8211176101c957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116101c957601f01601f191660200190565b929192610207826101df565b9161021560405193846101a7565b829481845281830111610232578281602093846000960137010152565b600080fd5b60005b83811061024a5750506000910152565b818101518382015260200161023a565b9060209161027381518092818552858086019101610237565b601f01601f191601019056fea2646970667358221220dba3a5de02dba4fdb87ad9831041b9c32aca38bc3c75f9c9125cd3123dc2e11a64736f6c63430008150033";

type TestJWTConstructorParams =
  | [linkLibraryAddresses: TestJWTLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestJWTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class TestJWT__factory extends ContractFactory {
  constructor(...args: TestJWTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, TestJWT__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: TestJWTLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$8f9caa4a00391e7768e6a3285c20104711\\$__", "g"),
      linkLibraryAddresses["contracts/lib/JWT.sol:JWT"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestJWT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestJWT__factory {
    return super.connect(runner) as TestJWT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestJWTInterface {
    return new Interface(_abi) as TestJWTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestJWT {
    return new Contract(address, _abi, runner) as unknown as TestJWT;
  }
}

export interface TestJWTLibraryAddresses {
  ["contracts/lib/JWT.sol:JWT"]: string;
}
