/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestHelper,
  TestHelperInterface,
} from "../../../contracts/test/TestHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "in_data",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "personalization",
        type: "bytes32",
      },
    ],
    name: "createChallengeBase64",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "authenticatorData",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "enum MakeJSON.ValueType",
            name: "t",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "k",
            type: "string",
          },
          {
            internalType: "string",
            name: "v",
            type: "string",
          },
        ],
        internalType: "struct MakeJSON.KeyValue[]",
        name: "clientDataTokens",
        type: "tuple[]",
      },
    ],
    name: "createDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576109b7908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c90816320ab2eab1461003a57506391b22db51461003557600080fd5b61014f565b346100c65760403660031901126100c65767ffffffffffffffff906004358281116100c95761006d9036906004016100cd565b9091602435908482116100c657366023830112156100c65781600401359485116100c6573660248660051b840101116100c6576100c26100b286602485018688610511565b6040519081529081906020820190565b0390f35b80fd5b5080fd5b9181601f840112156100fb5782359167ffffffffffffffff83116100fb57602083818601950101116100fb57565b600080fd5b60005b8381106101135750506000910152565b8181015183820152602001610103565b604091602082526101438151809281602086015260208686019101610100565b601f01601f1916010190565b346100fb576040806003193601126100fb5760043567ffffffffffffffff81116100fb57600061018560209236906004016100cd565b9081855192839283378101838152039060025afa1561021757602060006101cc815184519060243585830152858201528481526101c181610239565b845191828092610298565b039060025afa15610217576100c29061020c6101f961020760005184519283916020830160209181520190565b03601f198101835282610276565b6103dd565b905191829182610123565b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761025557604052565b610223565b6040810190811067ffffffffffffffff82111761025557604052565b90601f8019910116810190811067ffffffffffffffff82111761025557604052565b906102ab60209282815194859201610100565b0190565b67ffffffffffffffff811161025557601f01601f191660200190565b604051906020820182811067ffffffffffffffff8211176102555760405260008252565b604051906102fc82610239565b604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b634e487b7160e01b600052601160045260246000fd5b906002820180921161037257565b61034e565b906020820180921161037257565b906001820180921161037257565b600281901b91906001600160fe1b0381160361037257565b906103b5826102af565b6103c26040519182610276565b82815280926103d3601f19916102af565b0190602036910137565b8051156104ae576103ec6102ef565b906104096104046103fd8351610364565b6003900490565b610393565b9161041b61041684610377565b6103ab565b928352818251830191602085015b83831061046257505050506003905106806001146104565760021461044b5790565b805160001901815290565b50805160011901815290565b6004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301610429565b506104b76102cb565b90565b81601f820112156100fb578035906104d1826102af565b926104df6040519485610276565b828452602083830101116100fb57816000926020809301838601378301015290565b8260209493928237019081520190565b919267ffffffffffffffff90818111610255578060051b9460209560409384519361053e89840186610276565b8452878401918301923684116100fb579081899594935b8484106105e657505050505090600061059861057682610584979695610747565b845196879185830190610298565b03956101c1601f1997888101835282610276565b039060025afa15610217576105cb6105d5936000956105bf875185519687938b8501610501565b03908101845283610276565b5191828092610298565b039060025afa156102175760005190565b9091928094959650358381116100fb5782016060813603126100fb5787519161060e83610239565b813560028110156100fb5783528b8201358581116100fb5761063390369084016104ba565b8c84015288820135928584116100fb576106538d949385943691016104ba565b8a8201528152019301919089959493610555565b805182101561067b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60001981019190821161037257565b604051906106ad8261025a565b60018252607d60f81b6020830152565b600211156106c757565b634e487b7160e01b600052602160045260246000fd5b6040516020810190637472756560e01b8252600481526106fc8161025a565b51902090565b60405162461bcd60e51b815260206004820152601b60248201527f4d616b654a534f4e2e56616c7565547970652e756e6b6e6f776e2100000000006044820152606490fd5b906107528183610667565b519161075e8151610691565b8203610968575061076d6106a0565b905b825161077a816106bd565b610783816106bd565b61082257156107e857816101f96104b7926107c66107db604060206107cc9801519501516107c66040519889976107c660208a0160029061161160f11b81520190565b90610298565b62111d1160e91b815260030190565b601160f91b815260010190565b816101f96104b7926107c66107db604060206107cc9801519501516107c66040519889976107c660208a01600290613d9160f11b81520190565b919060018251610831816106bd565b61083a816106bd565b0361070257604080830151928151946020948661085a8782018093610298565b039661086e601f1998898101835282610276565b5190206108796106dd565b149061090c576108ce578301519051613d9160f11b938101938452936104b793909285926108c2926107c6916108af9160020183565b66223a66616c736560c81b815260070190565b03908101835282610276565b8301519051613d9160f11b938101938452936104b793909285926108c2926107c6916108fa9160020183565b65223a7472756560d01b815260060190565b61093c57830151905161161160f11b938101938452936104b793909285926108c2926107c6916108af9160020183565b830151905161161160f11b938101938452936104b793909285926108c2926107c6916108fa9160020183565b61097b9061097583610385565b90610747565b9061076f56fea26469706673582212206a27bc656b27585151062526312c0836ba3f12064730c8e1bf7128da5c7c8ad464736f6c63430008150033";

type TestHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestHelper__factory extends ContractFactory {
  constructor(...args: TestHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestHelper & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestHelper__factory {
    return super.connect(runner) as TestHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestHelperInterface {
    return new Interface(_abi) as TestHelperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestHelper {
    return new Contract(address, _abi, runner) as unknown as TestHelper;
  }
}
