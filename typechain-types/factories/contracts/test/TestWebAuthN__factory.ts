/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestWebAuthN,
  TestWebAuthNInterface,
} from "../../../contracts/test/TestWebAuthN";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "in_data",
        type: "bytes",
      },
    ],
    name: "testParseAuthData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "rpIdHash",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "UP",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "UV",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "BE",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "BS",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "AT",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "ED",
                type: "bool",
              },
            ],
            internalType: "struct AuthenticatorDataFlags",
            name: "flags",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "signCount",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "bytes16",
                name: "aaguid",
                type: "bytes16",
              },
              {
                internalType: "bytes",
                name: "credentialId",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "credentialPublicKey",
                type: "bytes",
              },
            ],
            internalType: "struct AttestedCredentialData",
            name: "attestedCredentialData",
            type: "tuple",
          },
        ],
        internalType: "struct AuthenticatorData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610419908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600090813560e01c63831479481461002c57600080fd5b3461027a57602092836003193601126102635767ffffffffffffffff92813584811161027a573660238201121561027a578083013594851161027a57366024868301011161027a5761007c6102be565b506100856102be565b91602586106102495785871161024957602482013583528587101561026757604482013560f81c93878401966001861615158851528186161515898951015260088616151587895101526080606096601081161515888b5101528881161515828b51015216151560a089510152806025116102635786850193604581013560e01c85526080895101516101c5575b60a0896101c18c8b6101ab8c808d63ffffffff8e86519a8b9a898c5284518a8d01525180511515898d0152898101511515868d015288810151151560808d0152858101511515828d01526080810151151560c08d01520151151560e08b01525116610100890152015193610120808801526001600160801b0319855116610140880152840151906101608701526101a086019061027e565b91015183820361013f190161018085015261027e565b0390f35b86860151928260351161024c576001600160801b031960498301351684528260371161024c57605982013560f01c908160370190816037116102505750831061024c579161023491605b8a948d61021f368385870161038b565b9088015236938190036036190192010161038b565b91015260a08651015161024957808080610113565b80fd5b8480fd5b634e487b7160e01b875260119052602486fd5b8280fd5b634e487b7160e01b815260328452602490fd5b5080fd5b919082519283825260005b8481106102aa575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610289565b6040908151608081019067ffffffffffffffff918181108382111761037557845280936000808352815160c081018181108682111761036157835281815281602082015281838201528160608201528160808201528160a08201526020840152808284015281519360608501908582109082111761034d57825283526060602084018190529083018190520152565b634e487b7160e01b82526041600452602482fd5b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b600052604160045260246000fd5b92919267ffffffffffffffff918281116103755760405192601f8201601f19908116603f0116840190811184821017610375576040528294818452818301116103de578281602093846000960137010152565b600080fdfea2646970667358221220d8c150f892a650184e23f636ebf9e4e277a613f9fba94875cf0c62ab4af40bbc64736f6c63430008150033";

type TestWebAuthNConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWebAuthNConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWebAuthN__factory extends ContractFactory {
  constructor(...args: TestWebAuthNConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestWebAuthN & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestWebAuthN__factory {
    return super.connect(runner) as TestWebAuthN__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWebAuthNInterface {
    return new Interface(_abi) as TestWebAuthNInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestWebAuthN {
    return new Contract(address, _abi, runner) as unknown as TestWebAuthN;
  }
}
