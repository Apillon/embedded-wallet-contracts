/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type Point256Struct = { x: BigNumberish; y: BigNumberish };

export type Point256StructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export interface TestP256R1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "add"
      | "double"
      | "ecdsa_sign_raw"
      | "ecdsa_sign_raw_precompile"
      | "ecdsa_test_encode"
      | "ecdsa_verify_raw"
      | "ecdsa_verify_raw_precompile"
      | "ecdsa_verify_raw_precompile_raw"
      | "isOnCurve"
      | "multiply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "double",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_sign_raw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_sign_raw_precompile",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_test_encode",
    values: [[BigNumberish, BigNumberish], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_verify_raw",
    values: [Point256Struct, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_verify_raw_precompile",
    values: [
      [BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ecdsa_verify_raw_precompile_raw",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOnCurve",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiply",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "double", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_sign_raw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_sign_raw_precompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_test_encode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_verify_raw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_verify_raw_precompile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ecdsa_verify_raw_precompile_raw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOnCurve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multiply", data: BytesLike): Result;
}

export interface TestP256R1 extends BaseContract {
  connect(runner?: ContractRunner | null): TestP256R1;
  waitForDeployment(): Promise<this>;

  interface: TestP256R1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [x1: BigNumberish, y1: BigNumberish, x2: BigNumberish, y2: BigNumberish],
    [[bigint, bigint] & { x3: bigint; y3: bigint }],
    "view"
  >;

  double: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [[bigint, bigint] & { x2: bigint; y2: bigint }],
    "view"
  >;

  ecdsa_sign_raw: TypedContractMethod<
    [secret: BigNumberish, z: BigNumberish],
    [[bigint, bigint] & { r: bigint; s: bigint }],
    "view"
  >;

  ecdsa_sign_raw_precompile: TypedContractMethod<
    [secret: BigNumberish, z: BigNumberish],
    [[bigint, bigint] & { r: bigint; s: bigint }],
    "view"
  >;

  ecdsa_test_encode: TypedContractMethod<
    [pubkey: [BigNumberish, BigNumberish], r: BigNumberish, s: BigNumberish],
    [[string, string] & { pkb: string; sig: string }],
    "view"
  >;

  ecdsa_verify_raw: TypedContractMethod<
    [pubkey: Point256Struct, z: BigNumberish, r: BigNumberish, s: BigNumberish],
    [boolean],
    "view"
  >;

  ecdsa_verify_raw_precompile: TypedContractMethod<
    [
      pubkey: [BigNumberish, BigNumberish],
      z: BigNumberish,
      r: BigNumberish,
      s: BigNumberish
    ],
    [boolean],
    "view"
  >;

  ecdsa_verify_raw_precompile_raw: TypedContractMethod<
    [pkb: BytesLike, z: BytesLike, sig: BytesLike],
    [boolean],
    "view"
  >;

  isOnCurve: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [boolean],
    "view"
  >;

  multiply: TypedContractMethod<
    [x0: BigNumberish, y0: BigNumberish, s: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [x1: BigNumberish, y1: BigNumberish, x2: BigNumberish, y2: BigNumberish],
    [[bigint, bigint] & { x3: bigint; y3: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "double"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish],
    [[bigint, bigint] & { x2: bigint; y2: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_sign_raw"
  ): TypedContractMethod<
    [secret: BigNumberish, z: BigNumberish],
    [[bigint, bigint] & { r: bigint; s: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_sign_raw_precompile"
  ): TypedContractMethod<
    [secret: BigNumberish, z: BigNumberish],
    [[bigint, bigint] & { r: bigint; s: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_test_encode"
  ): TypedContractMethod<
    [pubkey: [BigNumberish, BigNumberish], r: BigNumberish, s: BigNumberish],
    [[string, string] & { pkb: string; sig: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_verify_raw"
  ): TypedContractMethod<
    [pubkey: Point256Struct, z: BigNumberish, r: BigNumberish, s: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_verify_raw_precompile"
  ): TypedContractMethod<
    [
      pubkey: [BigNumberish, BigNumberish],
      z: BigNumberish,
      r: BigNumberish,
      s: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ecdsa_verify_raw_precompile_raw"
  ): TypedContractMethod<
    [pkb: BytesLike, z: BytesLike, sig: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOnCurve"
  ): TypedContractMethod<[x: BigNumberish, y: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "multiply"
  ): TypedContractMethod<
    [x0: BigNumberish, y0: BigNumberish, s: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  filters: {};
}
