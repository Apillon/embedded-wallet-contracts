/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type CosePublicKeyStruct = {
  kty: BigNumberish;
  alg: BigNumberish;
  crv: BigNumberish;
  x: BigNumberish;
  y: BigNumberish;
};

export type CosePublicKeyStructOutput = [
  kty: bigint,
  alg: bigint,
  crv: bigint,
  x: bigint,
  y: bigint
] & { kty: bigint; alg: bigint; crv: bigint; x: bigint; y: bigint };

export type AuthenticatorResponseStruct = {
  authenticatorData: BytesLike;
  clientDataTokens: MakeJSON.KeyValueStruct[];
  sigR: BigNumberish;
  sigS: BigNumberish;
};

export type AuthenticatorResponseStructOutput = [
  authenticatorData: string,
  clientDataTokens: MakeJSON.KeyValueStructOutput[],
  sigR: bigint,
  sigS: bigint
] & {
  authenticatorData: string;
  clientDataTokens: MakeJSON.KeyValueStructOutput[];
  sigR: bigint;
  sigS: bigint;
};

export declare namespace WebAuthNExample {
  export type RegisterECES256P256Struct = {
    hashedUsername: BytesLike;
    credentialId: BytesLike;
    pubkey: CosePublicKeyStruct;
    optionalPassword: BytesLike;
  };

  export type RegisterECES256P256StructOutput = [
    hashedUsername: string,
    credentialId: string,
    pubkey: CosePublicKeyStructOutput,
    optionalPassword: string
  ] & {
    hashedUsername: string;
    credentialId: string;
    pubkey: CosePublicKeyStructOutput;
    optionalPassword: string;
  };
}

export declare namespace MakeJSON {
  export type KeyValueStruct = { t: BigNumberish; k: string; v: string };

  export type KeyValueStructOutput = [t: bigint, k: string, v: string] & {
    t: bigint;
    k: string;
    v: string;
  };
}

export interface WebAuthNExampleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "credentialIdsByUsername"
      | "encrypted_registerECES256P256"
      | "encryptionSecret"
      | "gasless_registerECES256P256"
      | "gaspayingAddress"
      | "getAccount"
      | "proxyViewECES256P256"
      | "proxyViewPassword"
      | "salt"
      | "userExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "credentialIdsByUsername",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encrypted_registerECES256P256",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptionSecret",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasless_registerECES256P256",
    values: [
      WebAuthNExample.RegisterECES256P256Struct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gaspayingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyViewECES256P256",
    values: [BytesLike, AuthenticatorResponseStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyViewPassword",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "salt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userExists",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "credentialIdsByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encrypted_registerECES256P256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptionSecret",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasless_registerECES256P256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaspayingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyViewECES256P256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyViewPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userExists", data: BytesLike): Result;
}

export interface WebAuthNExample extends BaseContract {
  connect(runner?: ContractRunner | null): WebAuthNExample;
  waitForDeployment(): Promise<this>;

  interface: WebAuthNExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  credentialIdsByUsername: TypedContractMethod<
    [in_hashedUsername: BytesLike],
    [string[]],
    "view"
  >;

  encrypted_registerECES256P256: TypedContractMethod<
    [nonce: BytesLike, ciphertext: BytesLike],
    [void],
    "nonpayable"
  >;

  encryptionSecret: TypedContractMethod<[], [string], "view">;

  gasless_registerECES256P256: TypedContractMethod<
    [
      args: WebAuthNExample.RegisterECES256P256Struct,
      nonce: BigNumberish,
      gasPrice: BigNumberish
    ],
    [string],
    "view"
  >;

  gaspayingAddress: TypedContractMethod<[], [string], "view">;

  getAccount: TypedContractMethod<
    [in_username: BytesLike],
    [[string, string] & { account: string; keypairAddress: string }],
    "view"
  >;

  proxyViewECES256P256: TypedContractMethod<
    [
      in_credentialIdHashed: BytesLike,
      in_resp: AuthenticatorResponseStruct,
      in_data: BytesLike
    ],
    [string],
    "view"
  >;

  proxyViewPassword: TypedContractMethod<
    [in_hashedUsername: BytesLike, in_digest: BytesLike, in_data: BytesLike],
    [string],
    "view"
  >;

  salt: TypedContractMethod<[], [string], "view">;

  userExists: TypedContractMethod<[in_username: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "credentialIdsByUsername"
  ): TypedContractMethod<[in_hashedUsername: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "encrypted_registerECES256P256"
  ): TypedContractMethod<
    [nonce: BytesLike, ciphertext: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptionSecret"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasless_registerECES256P256"
  ): TypedContractMethod<
    [
      args: WebAuthNExample.RegisterECES256P256Struct,
      nonce: BigNumberish,
      gasPrice: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "gaspayingAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [in_username: BytesLike],
    [[string, string] & { account: string; keypairAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxyViewECES256P256"
  ): TypedContractMethod<
    [
      in_credentialIdHashed: BytesLike,
      in_resp: AuthenticatorResponseStruct,
      in_data: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxyViewPassword"
  ): TypedContractMethod<
    [in_hashedUsername: BytesLike, in_digest: BytesLike, in_data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "salt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userExists"
  ): TypedContractMethod<[in_username: BytesLike], [boolean], "view">;

  filters: {};
}
