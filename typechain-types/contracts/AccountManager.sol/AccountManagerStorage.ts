/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AccountManagerStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "gaspayingAddress"
      | "hashUsage"
      | "personalization"
      | "salt"
      | "signer"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GaslessTransaction"): EventFragment;

  encodeFunctionData(
    functionFragment: "gaspayingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashUsage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "personalization",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "salt", values?: undefined): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "gaspayingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashUsage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "personalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
}

export namespace GaslessTransactionEvent {
  export type InputTuple = [
    dataHash: BytesLike,
    hashedUsername: BytesLike,
    publicAddress: AddressLike
  ];
  export type OutputTuple = [
    dataHash: string,
    hashedUsername: string,
    publicAddress: string
  ];
  export interface OutputObject {
    dataHash: string;
    hashedUsername: string;
    publicAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountManagerStorage extends BaseContract {
  connect(runner?: ContractRunner | null): AccountManagerStorage;
  waitForDeployment(): Promise<this>;

  interface: AccountManagerStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  gaspayingAddress: TypedContractMethod<[], [string], "view">;

  hashUsage: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  personalization: TypedContractMethod<[], [string], "view">;

  salt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "gaspayingAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hashUsage"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "personalization"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "salt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "GaslessTransaction"
  ): TypedContractEvent<
    GaslessTransactionEvent.InputTuple,
    GaslessTransactionEvent.OutputTuple,
    GaslessTransactionEvent.OutputObject
  >;

  filters: {
    "GaslessTransaction(bytes32,bytes32,address)": TypedContractEvent<
      GaslessTransactionEvent.InputTuple,
      GaslessTransactionEvent.OutputTuple,
      GaslessTransactionEvent.OutputObject
    >;
    GaslessTransaction: TypedContractEvent<
      GaslessTransactionEvent.InputTuple,
      GaslessTransactionEvent.OutputTuple,
      GaslessTransactionEvent.OutputObject
    >;
  };
}
