/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type CosePublicKeyStruct = {
  kty: BigNumberish;
  alg: BigNumberish;
  crv: BigNumberish;
  x: BigNumberish;
  y: BigNumberish;
};

export type CosePublicKeyStructOutput = [
  kty: bigint,
  alg: bigint,
  crv: bigint,
  x: bigint,
  y: bigint
] & { kty: bigint; alg: bigint; crv: bigint; x: bigint; y: bigint };

export type AuthenticatorResponseStruct = {
  authenticatorData: BytesLike;
  clientDataTokens: MakeJSON.KeyValueStruct[];
  sigR: BigNumberish;
  sigS: BigNumberish;
};

export type AuthenticatorResponseStructOutput = [
  authenticatorData: string,
  clientDataTokens: MakeJSON.KeyValueStructOutput[],
  sigR: bigint,
  sigS: bigint
] & {
  authenticatorData: string;
  clientDataTokens: MakeJSON.KeyValueStructOutput[];
  sigR: bigint;
  sigS: bigint;
};

export declare namespace AccountManager {
  export type NewAccountStruct = {
    hashedUsername: BytesLike;
    credentialId: BytesLike;
    pubkey: CosePublicKeyStruct;
    optionalPassword: BytesLike;
  };

  export type NewAccountStructOutput = [
    hashedUsername: string,
    credentialId: string,
    pubkey: CosePublicKeyStructOutput,
    optionalPassword: string
  ] & {
    hashedUsername: string;
    credentialId: string;
    pubkey: CosePublicKeyStructOutput;
    optionalPassword: string;
  };

  export type ManageCredStruct = {
    credentialIdHashed: BytesLike;
    resp: AuthenticatorResponseStruct;
    data: BytesLike;
  };

  export type ManageCredStructOutput = [
    credentialIdHashed: string,
    resp: AuthenticatorResponseStructOutput,
    data: string
  ] & {
    credentialIdHashed: string;
    resp: AuthenticatorResponseStructOutput;
    data: string;
  };

  export type ManageCredPassStruct = { digest: BytesLike; data: BytesLike };

  export type ManageCredPassStructOutput = [digest: string, data: string] & {
    digest: string;
    data: string;
  };
}

export declare namespace MakeJSON {
  export type KeyValueStruct = { t: BigNumberish; k: string; v: string };

  export type KeyValueStructOutput = [t: bigint, k: string, v: string] & {
    t: bigint;
    k: string;
    v: string;
  };
}

export interface AccountManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "UPGRADE_INTERFACE_VERSION"
      | "createAccount"
      | "credentialIdsByUsername"
      | "encryptedTx"
      | "gaspayingAddress"
      | "generateGaslessTx"
      | "getAccount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "hashUsage"
      | "initialize"
      | "manageCredential"
      | "manageCredentialPassword"
      | "personalization"
      | "proxiableUUID"
      | "proxyView"
      | "proxyViewPassword"
      | "renounceRole"
      | "revokeRole"
      | "salt"
      | "setSigner"
      | "signer"
      | "supportsInterface"
      | "upgradeToAndCall"
      | "userExists"
      | "validateSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GaslessTransaction"
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values: [AccountManager.NewAccountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "credentialIdsByUsername",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedTx",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gaspayingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateGaslessTx",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashUsage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manageCredential",
    values: [AccountManager.ManageCredStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "manageCredentialPassword",
    values: [AccountManager.ManageCredPassStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "personalization",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyView",
    values: [BytesLike, AuthenticatorResponseStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyViewPassword",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "salt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "credentialIdsByUsername",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gaspayingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateGaslessTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashUsage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manageCredentialPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personalization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxyView", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyViewPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "salt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;
}

export namespace GaslessTransactionEvent {
  export type InputTuple = [
    dataHash: BytesLike,
    hashedUsername: BytesLike,
    publicAddress: AddressLike
  ];
  export type OutputTuple = [
    dataHash: string,
    hashedUsername: string,
    publicAddress: string
  ];
  export interface OutputObject {
    dataHash: string;
    hashedUsername: string;
    publicAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccountManager extends BaseContract {
  connect(runner?: ContractRunner | null): AccountManager;
  waitForDeployment(): Promise<this>;

  interface: AccountManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  createAccount: TypedContractMethod<
    [args: AccountManager.NewAccountStruct],
    [void],
    "nonpayable"
  >;

  credentialIdsByUsername: TypedContractMethod<
    [in_hashedUsername: BytesLike],
    [string[]],
    "view"
  >;

  encryptedTx: TypedContractMethod<
    [
      nonce: BytesLike,
      ciphertext: BytesLike,
      timestamp: BigNumberish,
      dataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  gaspayingAddress: TypedContractMethod<[], [string], "view">;

  generateGaslessTx: TypedContractMethod<
    [
      in_data: BytesLike,
      nonce: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "view"
  >;

  getAccount: TypedContractMethod<
    [in_username: BytesLike],
    [[string, string] & { account: string; keypairAddress: string }],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hashUsage: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  initialize: TypedContractMethod<[_signer: AddressLike], [void], "payable">;

  manageCredential: TypedContractMethod<
    [args: AccountManager.ManageCredStruct],
    [void],
    "nonpayable"
  >;

  manageCredentialPassword: TypedContractMethod<
    [args: AccountManager.ManageCredPassStruct],
    [void],
    "nonpayable"
  >;

  personalization: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  proxyView: TypedContractMethod<
    [
      in_credentialIdHashed: BytesLike,
      in_resp: AuthenticatorResponseStruct,
      in_data: BytesLike
    ],
    [string],
    "view"
  >;

  proxyViewPassword: TypedContractMethod<
    [in_hashedUsername: BytesLike, in_digest: BytesLike, in_data: BytesLike],
    [string],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  salt: TypedContractMethod<[], [string], "view">;

  setSigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  userExists: TypedContractMethod<[in_username: BytesLike], [boolean], "view">;

  validateSignature: TypedContractMethod<
    [
      _gasPrice: BigNumberish,
      _gasLimit: BigNumberish,
      _timestamp: BigNumberish,
      _dataKeccak: BytesLike,
      _signature: BytesLike
    ],
    [[string, boolean]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createAccount"
  ): TypedContractMethod<
    [args: AccountManager.NewAccountStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "credentialIdsByUsername"
  ): TypedContractMethod<[in_hashedUsername: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "encryptedTx"
  ): TypedContractMethod<
    [
      nonce: BytesLike,
      ciphertext: BytesLike,
      timestamp: BigNumberish,
      dataHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gaspayingAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateGaslessTx"
  ): TypedContractMethod<
    [
      in_data: BytesLike,
      nonce: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      timestamp: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccount"
  ): TypedContractMethod<
    [in_username: BytesLike],
    [[string, string] & { account: string; keypairAddress: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashUsage"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_signer: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "manageCredential"
  ): TypedContractMethod<
    [args: AccountManager.ManageCredStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manageCredentialPassword"
  ): TypedContractMethod<
    [args: AccountManager.ManageCredPassStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "personalization"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxyView"
  ): TypedContractMethod<
    [
      in_credentialIdHashed: BytesLike,
      in_resp: AuthenticatorResponseStruct,
      in_data: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxyViewPassword"
  ): TypedContractMethod<
    [in_hashedUsername: BytesLike, in_digest: BytesLike, in_data: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "salt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "userExists"
  ): TypedContractMethod<[in_username: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "validateSignature"
  ): TypedContractMethod<
    [
      _gasPrice: BigNumberish,
      _gasLimit: BigNumberish,
      _timestamp: BigNumberish,
      _dataKeccak: BytesLike,
      _signature: BytesLike
    ],
    [[string, boolean]],
    "view"
  >;

  getEvent(
    key: "GaslessTransaction"
  ): TypedContractEvent<
    GaslessTransactionEvent.InputTuple,
    GaslessTransactionEvent.OutputTuple,
    GaslessTransactionEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "GaslessTransaction(bytes32,bytes32,address)": TypedContractEvent<
      GaslessTransactionEvent.InputTuple,
      GaslessTransactionEvent.OutputTuple,
      GaslessTransactionEvent.OutputObject
    >;
    GaslessTransaction: TypedContractEvent<
      GaslessTransactionEvent.InputTuple,
      GaslessTransactionEvent.OutputTuple,
      GaslessTransactionEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
